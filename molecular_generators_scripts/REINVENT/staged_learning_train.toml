run_type = "staged_learning"
device = "cuda:0"
tb_logdir = "tb_stage"
json_out_config = "_stages.json"


[parameters]

summary_csv_prefix = "SL_sim_1"
use_checkpoint = false 
purge_memories = false  

prior_file = "reinvent.prior"
agent_file = "TL_GR_sim_1.model.56.chkpt"

batch_size = 1000

unique_sequences = true  
randomize_smiles = true  


[learning_strategy]

type = "dap"
sigma = 128
rate = 0.0001


[inception]

memory_size = 50
sample_size = 1000


[diversity_filter]

type = "IdenticalMurckoScaffold"
bucket_size = 10
minscore = 0.7
minsimilarity = 0.5


[[stage]]

chkpt_file = 'SL_sim_1.chkpt'

termination = "simple"
max_score = 1.0
max_steps = 200

[stage.scoring]
type = "geometric_mean"  # aggregation function

[[stage.scoring.component]]
[stage.scoring.component.custom_alerts]

[[stage.scoring.component.custom_alerts.endpoint]]
name = "Alerts"

params.smarts = [
    "[*;r8]",
    "[*;r9]",
    "[*;r10]",
    "[*;r11]",
    "[*;r12]",
    "[*;r13]",
    "[*;r14]",
    "[*;r15]",
    "[*;r16]",
    "[*;r17]",
    "[#8][#8]",
    "[#6;+]",
    "[#16][#16]",
    "[#7;!n][S;!$(S(=O)=O)]",
    "[#7;!n][#7;!n]",
    "C#C",
    "C(=[O,S])[O,S]",
    "[#7;!n][C;!$(C(=[O,N])[N,O])][#16;!s]",
    "[#7;!n][C;!$(C(=[O,N])[N,O])][#7;!n]",
    "[#7;!n][C;!$(C(=[O,N])[N,O])][#8;!o]",
    "[#8;!o][C;!$(C(=[O,N])[N,O])][#16;!s]",
    "[#8;!o][C;!$(C(=[O,N])[N,O])][#8;!o]",
    "[#16;!s][C;!$(C(=[O,N])[N,O])][#16;!s]"
]



[[stage.scoring.component]]
[stage.scoring.component.SAScore]

[[stage.scoring.component.SAScore.endpoint]]
name = "SAScore"
weight = 0.2
transform.type = "reverse_sigmoid"
transform.high = 10.0
transform.low = 1.0
transform.k = 0.5


[[stage.scoring.component]]
[stage.scoring.component.QED]

[[stage.scoring.component.QED.endpoint]]
name = "QED"
weight = 0.1


[[stage.scoring.component]]
[stage.scoring.component.ExternalProcess]

[[stage.scoring.component.ExternalProcess.endpoint]]
name = "QSAR"
weight = 0.7


params.executable = "/usr/bin/conda"
params.args = "run -n drugex  python pchembl_prediction.py"

transform.type = "sigmoid"
transform.high = 10
transform.low = 5.5
transform.k = 0.5
